// <auto-generated />
using System;
using Fines.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fines.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240731084155_SeedingTheDatabase")]
    partial class SeedingTheDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fines.Models.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateOfFine")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Fine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 30, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4006),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 29, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4052),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 28, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4055),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 27, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4058),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 26, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4060),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 6,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 25, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4062),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 7,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 24, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4063),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 8,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 23, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4065),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 9,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 22, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4070),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 10,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 21, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4072),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 11,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 20, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4074),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 12,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 19, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4075),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 13,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 18, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4078),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 6
                        },
                        new
                        {
                            Id = 14,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 17, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4080),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 6
                        },
                        new
                        {
                            Id = 15,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 16, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4082),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 6
                        },
                        new
                        {
                            Id = 16,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 15, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4084),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 7
                        },
                        new
                        {
                            Id = 17,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 14, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4086),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 7
                        },
                        new
                        {
                            Id = 18,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 13, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4088),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 7
                        },
                        new
                        {
                            Id = 19,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 12, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4089),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 8
                        },
                        new
                        {
                            Id = 20,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 11, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4091),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 8
                        },
                        new
                        {
                            Id = 21,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 10, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4093),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 8
                        },
                        new
                        {
                            Id = 22,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 9, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4095),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 9
                        },
                        new
                        {
                            Id = 23,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 8, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4097),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 9
                        },
                        new
                        {
                            Id = 24,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 7, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4099),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 9
                        },
                        new
                        {
                            Id = 25,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 6, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4101),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 10
                        },
                        new
                        {
                            Id = 26,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 5, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4103),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 10
                        },
                        new
                        {
                            Id = 27,
                            Amount = 75m,
                            DateOfFine = new DateTime(2024, 7, 4, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4105),
                            IsPaid = false,
                            Reason = "Mungesë sigurie",
                            VehicleId = 10
                        },
                        new
                        {
                            Id = 28,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 3, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4106),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 29,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 7, 2, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4108),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 30,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 7, 1, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4110),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 31,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 30, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4112),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 32,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 29, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4113),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 33,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 28, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4115),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 34,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 27, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4117),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 35,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 26, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4120),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 36,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 25, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4121),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 6
                        },
                        new
                        {
                            Id = 37,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 24, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4123),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 6
                        },
                        new
                        {
                            Id = 38,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 23, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4125),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 7
                        },
                        new
                        {
                            Id = 39,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 22, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4127),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 7
                        },
                        new
                        {
                            Id = 40,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 21, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4129),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 8
                        },
                        new
                        {
                            Id = 41,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 20, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4130),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 8
                        },
                        new
                        {
                            Id = 42,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 19, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4132),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 9
                        },
                        new
                        {
                            Id = 43,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 18, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4134),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 9
                        },
                        new
                        {
                            Id = 44,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 17, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4136),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 10
                        },
                        new
                        {
                            Id = 45,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 16, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4137),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 10
                        },
                        new
                        {
                            Id = 46,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 15, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4146),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 47,
                            Amount = 100m,
                            DateOfFine = new DateTime(2024, 6, 14, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4147),
                            IsPaid = false,
                            Reason = "Shpejtësi e tepërt",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 48,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 13, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4149),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 49,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 12, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4151),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 50,
                            Amount = 50m,
                            DateOfFine = new DateTime(2024, 6, 11, 10, 41, 55, 294, DateTimeKind.Local).AddTicks(4153),
                            IsPaid = false,
                            Reason = "Parkim i paligjshëm",
                            VehicleId = 5
                        });
                });

            modelBuilder.Entity("Fines.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            LicensePlate = "AA 123 BB"
                        },
                        new
                        {
                            VehicleId = 2,
                            LicensePlate = "BB 456 CC"
                        },
                        new
                        {
                            VehicleId = 3,
                            LicensePlate = "CC 789 DD"
                        },
                        new
                        {
                            VehicleId = 4,
                            LicensePlate = "DD 012 EE"
                        },
                        new
                        {
                            VehicleId = 5,
                            LicensePlate = "EE 345 FF"
                        },
                        new
                        {
                            VehicleId = 6,
                            LicensePlate = "FF 678 GG"
                        },
                        new
                        {
                            VehicleId = 7,
                            LicensePlate = "GG 901 HH"
                        },
                        new
                        {
                            VehicleId = 8,
                            LicensePlate = "HH 234 II"
                        },
                        new
                        {
                            VehicleId = 9,
                            LicensePlate = "II 567 JJ"
                        },
                        new
                        {
                            VehicleId = 10,
                            LicensePlate = "JJ 890 KK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fines.Models.Fine", b =>
                {
                    b.HasOne("Fines.Models.Vehicle", "Vehicle")
                        .WithMany("Fines")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fines.Models.Vehicle", b =>
                {
                    b.Navigation("Fines");
                });
#pragma warning restore 612, 618
        }
    }
}
